( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Ok, at this point the new image should be in control so we have a normal,   )
( though brutally minimal Retro system from here on.                          )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )


( Stack Words ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: nip   (  xy-y    ) swap drop ;
: rot   ( xyz-yzx  ) push swap pop swap ;
: tuck  (  xy-yxy  ) swap over ;
: +!    (  na-     ) dup push @ + pop ! ;
: -!    (  na-     ) dup push @ swap - pop ! ;
: ++    (   a-     ) 1 swap +! ;
: --    (   a-     ) 1 swap -! ;
: ?dup  (   n-n || n-nn )  dup 0; ;

( Scope ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
create list  ( -a )  0 , 0 ,
: {{ ( - )  vector off last @ dup list !+ ! ;
: ---reveal--- ( - ) vector on last @ list 1+ ! ;
: }} ( - )
  vector on list @+ swap @ =
  [ list @ last ! ]
  [ list @ [ last repeat @ dup @ list 1+ @ <> 0; drop again ] do ! ] if ;

( Vectored Execution ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: :devector ( a-  ) 0 swap !+ 0 swap ! ;
: :is       ( aa- ) 8 swap !+ ! ;
: devector  ( "-  ) ' 0; :devector ;
: is        ( a"- ) ' 0; :is ;
: default:  ( "-  ) ' 2 + , ; ' .macro last @ d->class !

: HEADERS   (  -n ) 32 ;

{{
  : scratch  ( -a )
    memory @       STRING-LENGTH   -  ( tib     )
                   STRING-LENGTH   -  ( scratch )
    STRING-BUFFERS STRING-LENGTH * -  ( buffers )
    HEADERS dup STRING-LENGTH * swap 3 * + -  ( headers ) ;

  create next  0 ,
  create split 0 ,

  [ split @
    [ heap @ [ next @ heap ! default: header heap @ next ! ] dip heap ! here last @ d->xt ! ]
    [ default: header ] if ] is header

  [ split  on scratch next ! default: {{           ] is {{
  [ split off                default: ---reveal--- ] is ---reveal---
  [ split off                default: }}           ] is }}
}}

( Dictionary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
  create a 0 , create b 0 , create c 0 , create xt 0 ,
  : skim       ( a-a )
    last repeat @ over over d->xt @ = [ nip 0 ] ifTrue 0; again ;
  : getHeaders ( $-  )
    xt ! 0 a ! 0 b ! 0 c !
    last repeat @ 0; dup d->xt @ xt @ = [ dup b ! @ a ! 0 ] [ -1 ] if 0; drop dup c ! again ;
  : <hide>     ( a-  ) getHeaders b @ 0; drop a @ c @ ! ;
---reveal---
  : d'         ( "-a ) ' drop which @ ;
  : xt->d      ( a-d || a-0 ) dup skim over over = [ - ] [ nip ] if ;
  : :hide      ( a-  )
    dup xt->d last @ = [ drop last @ @ last ! ] [ <hide> ] if ;
  : hide       ( "-  ) ' 0; :hide ;
}}
hide list
hide vector
: reclass      (  a- ) last @ d->class ! ;
: reclass:     ( a"- ) d' d->class ! ;

( Initial Prefixes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
  : xt:class ( a-aa ) dup xt->d 0; d->class @ withClass ;
---reveal---
  : __&  ( a-a ) .data                  ; &.macro reclass
  : __@  ( a-n ) xt:class &@  xt:class  ; &.macro reclass
  : __!  ( na- ) xt:class &!  xt:class  ; &.macro reclass
  : __+  ( na- ) xt:class &+! .word     ; &.macro reclass
  : __-  ( na- ) xt:class &-! .word     ; &.macro reclass
  : __2  ( a-  ) &xt:class sip xt:class ; &.macro reclass
}}

( Classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: .compiler    (  a- ) @compiler &do &drop if ;
: immediate    (   - ) &.macro reclass ;
: compile-only (  "- ) &.compiler reclass ;

( Remap some classes for efficiency and safety ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
here
{{
  : c: ( "- ) &.compiler reclass: ;
  c: pop    c: push   c: 0;     c: ;;    c: ;      c: repeat c: again
}}
!heap

( Compiler Macros ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: `     ( "-  )
  ' ?dup 0 <> -1 =
  [ .data @which @d->class , ]
  [  tib isNumber? -1 =
    [ tib toNumber .data &.data , ] [ notFound ] if ] if ; compile-only
: jump: ( "- ) ' 0; 8 , , ; compile-only

( Additional Combinators ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: []      (    -    ) ` [ ` ] ; immediate
: while   (   q-    ) [ repeat dup dip swap 0; drop again ] do drop ;
: until   (   q-    ) [ repeat dup dip swap not 0; drop again ] do drop ;
: curry   (  nq-q   ) [ [ ` [ ] dip .data ] dip , ` ] ;
: take    (  qq-q   ) swap [ [ ` [ ] dip , ] dip .data ` ] ;
: bi      (  xqq-   ) &sip dip do ;
: bi*     ( xyqq-   ) &dip dip do ;
: bi@     (  xyq-   ) dup bi* ;
: tri     ( xqqq-   ) [ &sip dip sip ] dip do ;
: tri*    ( xyzqqq- ) [ [ swap &dip dip ] 2dip ] dip do ;
: tri@    ( xyzq-   ) 2dup tri* ;
: cons    (  ab-q   ) 2push ` [ 2pop &.data bi@ ` ] ;
: preserve ( aq-    ) swap &@ sip [ &do dip ] dip ! ;
: when    (  nqq-n  )
  [ over swap do ] dip swap
  [ do -1 ] [ drop 0 ] if 0; pop 2drop ;
: whend   ( nqq-? )
  [ over swap do ] dip swap
  [ nip do -1 ] [ drop 0 ] if 0; pop 2drop ;

{{
  : for   ( R: n-  C: -a ) here ` push ; compile-only
  : next  ( R: -   C: a- ) ` pop 7 , , ; compile-only
  : i 2pop pop 2over 2push swap - swap push ;
  : tors  (    -n ) ` pop ` dup ` push ; compile-only
---reveal---
  : times (  nq-  )
    over 1 >= [ swap for dup dip next drop ] [ 2drop ] if ;
  : iterd (  nq-  )
    over 1 >= [ swap for tors swap dup dip next drop ] [ 2drop ] if ;
  : iter  (  nq-  )
    over 1 >= [ swap dup push for i swap dup dip next pop 2drop ] [ 2drop ] if ;
}}

{{
  : each   (  qa- ) [ [ swap dup &do dip ] sip 1+ ] times 2drop ;
  : array  (  aq- ) swap @+ dup 1 > [ each ] [ 2drop ] if ;
  : buffer ( anq- ) 2rot each ;
  : list   (  lq- ) [ &@ dip 2over [ &do dip ] dip over @ ] while 2drop ;
---reveal---
  : <each@> ( ...t- ) drop ;
  : each@   ( ...t- )
    [ 0  ( ARRAY  ) = ] [ array                  ] whend
    [ 1  ( BUFFER ) = ] [ buffer                 ] whend
    [ 2  ( STRING ) = ] [ &withLength dip buffer ] whend
    [ 3  ( LIST   ) = ] [ list                   ] whend
    <each@> ;
}}

( Memory Blocks ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: copy   ( aan-  ) [ &@+ dip !+ ] times 2drop ;
: fill   ( ann-  ) swap !here [ @here swap !+ ] times drop ;

( Conditionals ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: ahead  (   -a  ) 8 , here 0 , ;
: if;    (  f-   ) ` not ` 0; ` drop ; compile-only
: within ( xlu-f ) &over dip <= &>= dip and ;

( Data Structures ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: variable:  ( n"-  ) create , ;
: variable   (  "-  ) 0 variable: ;
: constant   ( n"-  ) create @last !d->xt ;
: string:    ( $"-  ) keepString constant ;
: allot      (  n-  ) dup 0 < [ +heap ] [ [ 0 , ] times ] if ;
{{
  : list     (  n-a ) here swap allot ;
  : element  (  a-a ) create dup @last !d->xt 1+ ;
---reveal---
  : elements ( n"-  ) dup list swap &element times drop ;
}}

( Numbers and Math ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: decimal ( - ) 10 !base ;
: hex     ( - ) 16 !base ;
: octal   ( - )  8 !base ;
: binary  ( - )  2 !base ;

( Output ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
  create buf   32 allot
  2 elements digits pos
  : split    (   n-... )
    repeat @base /mod swap numbers + @ swap digits ++ 0; again ;
  : build    ( ...-    )
    buf @pos [ @pos swap !+ ] ifTrue
    @digits [ !+ ] times 0 swap ! ;
  : negate?  (   n-n   ) dup 0 >= if; negate 45 !pos ;
---reveal---
  : toString (   n-$   ) 0 [ !pos ] [ !digits ] bi negate? split build buf ;
}}
: clear (  - ) -1 putc ;
: space (  - ) 32 putc ;
: putn  ( n- ) toString puts ;

( Parsing prefixes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: .parse  (  a- ) do ;
: parsing (   - ) &.parse reclass ;
{{
  : number ( a- ) base [ do toNumber .data ] preserve ;
---reveal---
  : __$   ( $-n ) &hex     number ; parsing
  : __#   ( $-n ) &decimal number ; parsing
  : __%   ( $-n ) &binary  number ; parsing
  : __'   ( $-n ) @ .data         ; parsing
}}

( Chained Vocabularies ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
create dicts 64 allot
{{
  2 elements active prior
  create "|" 124 ,  0 ,
  create "%%" 37 , 37 , 0 ,
  : seal   (  - ) last [ @ 0; @active over @ = ] until 0 swap ! ;
  : revert (  - ) @prior 0; !last 0 !prior ;
  : safety (  - ) "%%" header immediate &revert @last !d->xt ;
---reveal---
  : %%     (  - ) revert ;
  : <%>    ( a- ) @last !prior !last ;
  : .chain ( a- ) @dicts &drop &<%> if ;
  : chain: ( "- ) create 0 , &.chain reclass @last !active safety ;
  : ;chain (  - ) seal @last @active [ !last ] [ !d->xt ] bi ;
  : :with  ( a- ) 0; @dicts 1+ dicts + ! dicts ++ ;
  : with   ( "- ) ' :with ;
  : without ( - ) @dicts 0; 1- !dicts ;
  : global  ( - ) 0 !dicts ;
  : findInChain ( $a-df ) :with find without ;
  : with|  ( "- )
    global
    repeat
      32 accept tib "|" compare if;
      tib find [ @d->xt :with ] &drop if
    again ;
}}

: rename: ( a"- )
  create dup xt->d swap :hide
  [ @d->xt @last !d->xt ] [ @d->class @last !d->class ] bi ;

( Extend 'find' and 'xt->d' to search chains before global ~~~~~~~~~~~~~~~~~~ )
{{
  5 elements flag dt name safety xt
  : search  (  -   ) @dicts repeat 0; dup dicts + <%> @xt do 1- again ;
  : (chains ( $-   ) !name 0 [ !dt ] [ !flag ] bi @last !safety ;
  : back)   (   -  ) @safety !last ;
  : seek    ( na-n ) @name default: find [ !dt flag on drop 1 ] &drop if ;
  : lookup  ( $-af )
    &seek !xt (chains search back)
    @flag [ @dt @flag ] [ @name default: find ] if ;
  &lookup is find

  : seek    (   -  )
    @name default: xt->d ?dup [ !dt flag on drop 1 ] ifTrue ;
  : lookup  (  a-d )
    &seek !xt (chains search back)
    @flag [ @dt ] [ @name default: xt->d ] if ;
  &lookup is xt->d
}}

( Extend Prefix Handler ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
  4 elements xt class name flag
  create ___ 95 , 95 , 95 , 0 ,

  ( Split Token into Prefix and Name ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
  : action   (  -   ) @xt @class withClass ;
  : (split   (  -a  ) @+ ___ tuck 1+ 1+ ! swap !name ;
  : prefix)  ( $-f  )
    find [ [ @d->class !class ] [ @d->xt !xt ] bi -1 ] [ 0 ] if ;

  ( Prefix Handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
  : handle   (  -   )
    @class &.parse =
    [ flag off @name action ]
    [ @name find [ @d->xt action flag off ] &drop if ]
    if ;

  ( Main Wrapper ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
  : try      (  -   )
    flag on tib (split prefix) &handle &drop if @flag ;
  &try is <notFound>
}}

( Core Strings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
  : buffers  ( -a )
    @memory        STRING-LENGTH   -  ( tib     )
                   STRING-LENGTH   -  ( scratch )
    STRING-BUFFERS STRING-LENGTH * -  ( buffers ) ;
  variable next
---reveal---
  : tempString ( $-$ )
    withLength 1+
    @next STRING-BUFFERS = [ 0 !next ] ifTrue
    @next STRING-LENGTH * buffers + [ swap copy ] sip
    next ++ ;
}}

{{
  variable end
  : pad  ( -a )
    @memory        STRING-LENGTH   -  ( tib     )
                   STRING-LENGTH   -  ( scratch ) ;
  : keep    (  -  ) @compiler &keepString &tempString if .data ;
  : >pad    ( $-$ ) pad over getLength 1+ copy pad keep ;
  : chop    ( $-$ ) end -- 0 @end ! ;
  : >$      ( n-  ) dup 8 = [ chop drop ] [ @end !+ !end ] if ;
  : end?    ( $-$ ) @end @1- '" = [ chop >pad -1 ] [ 0 ] if ;
  : noEat   ( q-  ) eatLeading? off do eatLeading? on ;
  : withPad ( q-  ) 32 pad 1- ! &pad &tib :is noEat &tib :devector ;
  : get     (  -c ) getc dup putc ;
---reveal---
  : __"  ( "-a )
    dup withLength + !end
    end? [ 32 >$ [ end? [ 0 ] [ get >$ -1 ] if ] while ] ifFalse ; parsing
  : "    ( "-$ ) [ '" accept pad 1- keep ] withPad ; immediate
}}

( Formatted String Display ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
-1 variable: formatted
{{
  : withBase ( n$q-$ ) &swap dip base &do preserve ;
  : char ( $-$ )
    @+ [ 'n = ] [ cr      ] whend
       [ '' = ] [ '" putc ] whend
       [ '[ = ] [ 27 putc putc ] when
    putc ;
  : obj  ( $-$ )
    @+ [ 'd = ] [ [ decimal putn ] withBase ] whend
       [ 'o = ] [ [ octal   putn ] withBase ] whend
       [ 'x = ] [ [ hex     putn ] withBase ] whend
       [ 'c = ] [ swap putc                 ] whend
       [ 's = ] [ formatted off &puts dip formatted on ] whend
       putc ;
  : complex ( $-n )
    repeat
      @+ 0;
      dup '\ = [ drop char 0 ] ifTrue
      dup '% = [ drop obj  0 ] ifTrue
      putc
    again ;
  : simple ( $- ) [ @ putc ] 2 ( STRING ) each@ ;
  [ update off @formatted [ complex drop ] &simple if update on redraw ] is <puts>
}}

( Debugging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: depth   (    -n ) -5 5 out wait 5 in ;
: reset   ( ...-  ) depth repeat 0; 1- nip again ;
{{
  : (.s)  0; 1- swap push (.s) pop dup putn space ;
---reveal---
  : .s    depth [ "\n<%d> " puts ] sip (.s) ;
}}

{{
  : list    ( a-  ) [ d->name puts space ] 3 ( ^types'LIST ) each@ ;
  : others  (  -  ) @dicts repeat 0; cr dup dicts + list 1- again ;
---reveal---
  : words   (  -  ) cr formatted dup [ off others cr last list ] preserve ;
}}

( Misc. Words ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: save     (  -  ) 1 4 out wait ;
: bye      (  -  ) cr -9 5 out wait ;
: getToken ( "-$ ) 32 accept tib tempString ;
: getNumber ( "-n )  getToken toNumber ;
: :include ( $-  ) 2 4 out wait ;
: include  ( "-  ) getToken :include ;
: time     (  -n ) -8 5 out wait 5 in ;
: delay    ( n-  ) time + [ dup time > ] while drop ;
: getEnv   ( a$- ) -10 5 out wait ;
: later    (  -  ) 2pop swap 2push ;
: doc{     ( "-  ) repeat getToken "}doc" compare if; again ;
: variables|  ( "- )
  repeat getToken "|" compare if; tib header 0 , again ;

( Generic Buffer ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
global
chain: buffer'
{{
  variables| buffer ptr |
  : terminate (  -  ) 0 @ptr ! ;
---reveal---
  : start     (  -a ) @buffer  ;
  : end       (  -a ) @ptr     ;
  : add       ( c-  ) end ! ptr ++ terminate ;
  : get       (  -c ) ptr -- end @ terminate ;
  : empty     (  -  ) start !ptr   terminate ;
  : size      (  -n ) end start -   ;
  : set       ( a-  ) !buffer empty ;
}}
;chain

( Text Strings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
with buffer'
chain: strings'
{{
  variables| len needle haystack flag right left src |
  : buffer  ( -a )
    @memory        STRING-LENGTH   -  ( tib     )
                   STRING-LENGTH   -  ( scratch ) ;
  : trim   ( $-$ )
    dup withLength + 1- dup @ 32 = [ 0 swap ! dup 1- -- trim ] &drop if ;
  : place  ( $$n- ) [ copy 0 ] sip here + ! ;
  : prep   (  $$- ) swap !haystack [ getLength !len ] [ !needle ] bi 0 !flag ;
  : move   (    - ) @haystack here @len place haystack ++ ;
  : cmp    (    - )
    @flag 0 <> if; @needle here compare [ @haystack 1- !flag ] ifTrue ;
---reveal---
  : search   ( $$-f )
    flag off prep @haystack getLength [ move cmp ] times @flag ;
  : findChar ( $c-a )
    !needle
    repeat @+
      dup 0   = [ 2drop 0 0 ] [ -1 ] if 0; drop
      @needle = [ 1-      0 ] [ -1 ] if 0; drop
    again ;
  : chop      ( $-$ ) tempString withLength over + 1- 0 swap ! ;
  : getSubset ( $nn-$ )
    buffer 0 STRING-LENGTH fill
    !right !left !src
    @src @left + @right buffer swap copy buffer tempString ;
  : trimLeft  ( $-$ ) [ @+ [ 32 = ] [ 0 <> ] bi and ] while 1- ;
  : trimRight ( $-$ )
    buffer [ 0 STRING-LENGTH fill ] [ over getLength copy ] [ trim ] tri tempString ;
  : prepend ( $$-$ )
    buffer 0 STRING-LENGTH fill
    withLength buffer swap &copy sip
    &withLength dip buffer + swap copy buffer tempString ;
  : append ( $$-$ ) swap prepend ;
  : appendChar ( $c-$ ) swap tempString [ withLength + !+ 0 swap ! ] sip ;
  : toLower ( $-$ )
    withLength 1+
    [ buffer + [ @+ dup 'A 'Z within [ 32 + ] ifTrue ] dip ! ] iter
    drop buffer tempString ;
  : toUpper ( $-$ )
    withLength 1+
    [ buffer + [ @+ dup 'a 'z within [ 32 - ] ifTrue ] dip ! ] iter
    drop buffer tempString ;
}}
  : reverse ( $-$ )
    dup tempString set
    &getLength [ withLength + 1- ] bi swap
    [ dup @ add 1- ] times drop
    start tempString ;
  : split ( $n-$$ )
    2over 0 swap getSubset &+ dip ;
  : splitAtChar ( $c-$$ )
    2over over swap findChar over - 1+ 0 swap getSubset [ findChar 1+ ] dip ;
  : splitAtChar: ( $"-$$ )
    @getToken .data ` splitAtChar ; immediate
;chain
without

( Access Words Within Chains Directly ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
with strings'
: __^  ( "- )
  splitAtChar: ' find
  [ @d->xt findInChain [ [ @d->xt ] [ @d->class ] bi withClass ] &drop if ]
  &drop if ; parsing

: needs  ( "- )
  getToken dup find nip
  &drop [ "library/" prepend chop ".rx" append :include ] if ;
without

( types' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
chain: types'
  0 constant ARRAY  ( -n )
  1 constant BUFFER ( -n )
  2 constant STRING ( -n )
  3 constant LIST   ( -n )
;chain

( cleanup and save ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
global .s save bye

